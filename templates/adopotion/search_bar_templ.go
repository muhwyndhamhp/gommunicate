// Code generated by templ@v0.2.364 DO NOT EDIT.

package adoption

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/muhwyndhamhp/gotes-mx/modules/pet"

func searchBar(petTypes []pet.PetTypeSet) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form class=\"w-full lg:w-2/3 xl:w-1/2 m-auto flex flex-row\">")
		if err != nil {
			return err
		}
		err = petToggle(petTypes).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<input class=\"w-full rounded-2xl border-transparent z-10 shadow-2xl outline outline-1 outline-slate-300 focus:border-transparent focus:outline-slate-500 text-lg px-6 py-2\" hx-get=\"/adoptions/list\" hx-trigger=\"keyup changed delay:500ms, search\" hx-target=\"#pets-parent\" hx-swap=\"innerHTML\" name=\"search\" hx-indicator=\"#pet-loading\" id=\"search\" type=\"text\" _=\"\n        on htmx:configRequest \n            get the first &lt;li.select/&gt; in the closest parent &lt;form/&gt; \n        then \n            set pet to result@value \n        then \n            js(pet) event.detail.parameters[&#39;pet_type&#39;] = pet\"></form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func petToggle(petTypes []pet.PetTypeSet) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for i, pet := range petTypes {
			_, err = templBuffer.WriteString("<li")
			if err != nil {
				return err
			}
			if i == 0 {
				_, err = templBuffer.WriteString(" class=\"select flex flex-row cursor-pointer translate-x-12 ps-6 pe-20 py-2 bg-blue-100 rounded-2xl border-transparent outline-1 outline-cyan-200\"")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString(" class=\"hidden flex flex-row cursor-pointer translate-x-12 ps-6 pe-20 py-2 bg-blue-100 rounded-2xl border-transparent outline-1 outline-cyan-200\"")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(string(pet.PetType)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" _=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(toggleNext()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			err = petToggleItem(pet).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</li>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func toggleNext() string {
	return `
    on click 
        toggle between .select and .hidden on me
    then
        get the next <li/>
    if the result matches .hidden and .flex-row
        then 
            toggle between .select and .hidden on it

    else get the first <li/> in the closest parent <form/>
        if 
            the result matches .hidden and .flex-row
        then 
            toggle between .select and .hidden on it
        end
    end
    then
        js htmx.trigger("#search", "search")
    end
    `
}

func petToggleItem(pet pet.PetTypeSet) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<img src=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(pet.URL))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"m-auto w-6 h-6 me-2\">")
		if err != nil {
			return err
		}
		if string(pet.PetType) == "" {
			_, err = templBuffer.WriteString("<p class=\"text-lg mb-0.5\">")
			if err != nil {
				return err
			}
			var_4 := `All`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<p class=\"text-lg mb-0.5\">")
			if err != nil {
				return err
			}
			var var_5 string = string(pet.PetType)
			_, err = templBuffer.WriteString(templ.EscapeString(var_5))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
