// Code generated by templ@v0.2.364 DO NOT EDIT.

package adoption

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/muhwyndhamhp/gotes-mx/modules/pet"
)

func imageCarousel(images []pet.Image) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"w-full relative rounded-2xl\" id=\"carousel-parent\">")
		if err != nil {
			return err
		}
		for index, image := range images {
			if index == 0 {
				_, err = templBuffer.WriteString("<div class=\"block transition-opacity duration-1000 ease-in\" id=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf(`cr-item-%d`, index)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				err = carouselItem(image, index, len(images)).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<div class=\"hidden transition-opacity duration-1000 ease-in\" id=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf(`cr-item-%d`, index)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				err = carouselItem(image, index, len(images)).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func carouselItem(image pet.Image, index, length int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<p class=\"text-white text-xs px-2 py-3 absolute top-0\">")
		if err != nil {
			return err
		}
		var var_3 string = fmt.Sprintf("%d / %d", index+1, length)
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><img src=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(image.URL))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"w-full aspect-square object-cover rounded-2xl\"><button class=\"cursor-pointer absolute top-1/2 w-auto \n        -mt-6 p-4 text-white font-bold text-md ease-in \n        duration-300 rounded-r-3xl select-none \n        hover:bg-gray-950\" _=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(goToPreviousItem()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_4 := `&#10094;`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button class=\"cursor-pointer absolute top-1/2 w-auto \n        -mt-6 p-4 text-white font-bold text-md ease-in \n        duration-300 rounded-l-3xl select-none \n        hover:bg-gray-950 right-0\" _=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(goToNextItem()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_5 := `&#10095;`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func goToPreviousItem() string {
	return `
    on click 
        get the previous <div/>
    if 
        the result matches .hidden 
    then
        add .hidden to closest <div/>
    then
        remove .block from closest <div/>
    then
        add .block to the previous <div/>
    then 
        remove .hidden from the previous <div/>
    `
}

func goToNextItem() string {
	return `
    on click 
        get the next <div/>
    if 
        the result matches .hidden 
    then
        add .hidden to closest <div/>
    then
        remove .block from closest <div/>
    then
        add .block to the next <div/>
    then 
        remove .hidden from the next <div/>
    `
}
